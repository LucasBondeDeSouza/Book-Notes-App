<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
  integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>

<script>
  (() => {
    'use strict'

    // Fetch all the forms we want to apply custom Bootstrap validation styles to
    const forms = document.querySelectorAll('.needs-validation')

    // Loop over them and prevent submission
    Array.from(forms).forEach(form => {
      form.addEventListener('submit', event => {
        if (!form.checkValidity()) {
          event.preventDefault()
          event.stopPropagation()
        }

        form.classList.add('was-validated')
      }, false)
    })
  })()

  $(document).ready(function () {
    $('[data-bs-toggle="popover"]').popover();
  });

  document.addEventListener('DOMContentLoaded', function () {
    const dropdowns = document.querySelectorAll('.dropdown');
    dropdowns.forEach(dropdown => {
      const svg = dropdown.querySelector('svg');
      const dropdownContent = dropdown.querySelector('.dropdown-content');
      svg.addEventListener('click', function (event) {
        event.stopPropagation();
        dropdownContent.style.display = dropdownContent.style.display === 'block' ? 'none' : 'block';
      });
      document.addEventListener('click', function () {
        dropdownContent.style.display = 'none';
      });
    });
  });

  function flipCard(img) {
    const card = img.closest('.flip-card');
    card.classList.toggle('flipped');
  }
</script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
      // Exibe a tela de carregamento quando a página começar a carregar
      document.getElementById("loading-screen").classList.remove("d-none");

      // Oculta a tela de carregamento quando a página terminar de carregar
      window.addEventListener("load", function () {
          document.getElementById("loading-screen").classList.add("d-none");
      });
  });
</script>

<script>
  document.querySelectorAll('.like-btn').forEach(button => {
    button.addEventListener('click', async (event) => {
        const icon = event.currentTarget;
        const bookId = icon.dataset.bookId;
        const likeCountElement = icon.nextElementSibling.querySelector('span');

        try {
            const response = await fetch('/book/like', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ bookId })
            });

            if (response.ok) {
                const data = await response.json();
                let likeCount = data.likeCount;

                if (data.liked) {
                    icon.classList.remove('bi-heart');
                    icon.classList.add('bi-heart-fill');
                } else {
                    icon.classList.remove('bi-heart-fill');
                    icon.classList.add('bi-heart');
                }

                // Atualiza o texto do span com base no número de likes
                if (likeCount >= 1000 && likeCount < 1000000) {
                    likeCountElement.textContent = (likeCount / 1000).toFixed(1) + 'k';
                } else {
                    likeCountElement.textContent = likeCount;
                }
            } else {
                console.error('Failed to like/unlike the book');
            }
        } catch (err) {
            console.error('Error:', err);
        }
    });
  });
</script>

</body>

</html>