<div class="modal fade" id="modalLikes" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Likes</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <div class="my-2 d-flex filter-sidebar">
                    <button id="toggleButton" class="btn-filter">
                        <i class="bi bi-search fs-5 fw-bold"></i>
                    </button>
                    <input type="text" id="likeFilterInput" class="form-control" placeholder="Search" />
                </div>

                <div id="likeList">
                    <!-- Lista de likes será injetada aqui -->
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const modalElement = document.getElementById('modalLikes');
        let users = []; // Armazena os usuários que curtiram o livro

        modalElement.addEventListener('show.bs.modal', async function (event) {
            const button = event.relatedTarget; // Botão que acionou o modal
            const bookId = button.getAttribute('data-book-id'); // Pega o data-book-id do botão clicado
            const response = await fetch(`/likes?book_id=${bookId}`);
            users = await response.json();

            renderLikes(users);
        });

        // Função para renderizar a lista de curtidas
        function renderLikes(users) {
            const likeList = document.getElementById('likeList');
            likeList.style.maxHeight = '350px';
            likeList.style.overflowY = 'auto';
            likeList.innerHTML = ''; // Limpa a lista existente

            users.forEach(user => {
                const userContainer = document.createElement('div');
                userContainer.classList.add('d-flex', 'align-items-center', 'justify-content-between', 'like-item');

                const userLink = document.createElement('a');
                userLink.href = `/user/profile?userId=${user.id}`;
                userLink.className = 'text-decoration-none text-dark d-flex align-items-center';

                const userInfo = document.createElement('div');
                userInfo.className = 'd-flex align-items-center';

                if (user.picture) {
                    const userImage = document.createElement('img');
                    userImage.src = user.picture;
                    userImage.className = 'rounded-circle my-2';
                    userImage.style.width = '40px';
                    userImage.style.height = '40px';
                    userImage.style.marginRight = '10px';
                    userInfo.appendChild(userImage);
                } else {
                    const userIcon = document.createElement('i');
                    userIcon.className = 'bi bi-person-circle';
                    userIcon.style.fontSize = '40px';
                    userIcon.style.marginRight = '10px';
                    userInfo.appendChild(userIcon);
                }

                const userName = document.createElement('span');
                userName.textContent = user.username;
                userInfo.appendChild(userName);

                userLink.appendChild(userInfo);

                // Cria botão de seguir/desseguir
                const followButton = document.createElement('button');
                followButton.className = `btn btn-${user.isfollowing ? 'secondary' : 'primary'} btn-sm follow-btn ms-3`;
                followButton.dataset.userId = user.id;

                const icon = document.createElement('i');
                icon.className = `fas fa-user-${user.isfollowing ? 'check' : 'plus'}`;
                followButton.appendChild(icon);

                const followText = document.createElement('span');
                followText.className = 'follow-text ms-2';
                followText.textContent = user.isfollowing ? 'Following' : 'Follow';
                followText.classList.add('d-none'); // Texto escondido por padrão
                followButton.appendChild(followText);

                userContainer.appendChild(userLink);
                userContainer.appendChild(followButton);
                likeList.appendChild(userContainer);

                // Função para atualizar o texto do botão com base no tamanho
                const updateButtonText = () => {
                    if (followButton.clientWidth < 100) {
                        followText.classList.add('d-none');
                    } else {
                        followText.classList.remove('d-none');
                    }
                };

                updateButtonText();
                window.addEventListener('resize', updateButtonText);

                // Evento de clique para seguir/desseguir
                followButton.addEventListener('click', async (event) => {
                    event.preventDefault(); // Impede o redirecionamento padrão
                    const isFollowing = followButton.classList.contains('btn-secondary');
                    const route = isFollowing ? '/unfollow' : '/follow';

                    try {
                        const res = await fetch(route, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ userId: user.id })
                        });

                        if (res.ok) {
                            if (isFollowing) {
                                followButton.classList.remove('btn-secondary');
                                followButton.classList.add('btn-primary');
                                icon.classList.replace('fa-user-check', 'fa-user-plus');
                                followText.textContent = 'Follow';
                            } else {
                                followButton.classList.remove('btn-primary');
                                followButton.classList.add('btn-secondary');
                                icon.classList.replace('fa-user-plus', 'fa-user-check');
                                followText.textContent = 'Following';
                            }
                            updateButtonText();
                        } else {
                            console.error('Failed to follow/unfollow the user');
                        }
                    } catch (err) {
                        console.error('Error:', err);
                    }
                });
            });
        }

        // Função para filtrar os usuários que curtiram
        document.getElementById('likeFilterInput').addEventListener('input', function () {
            const filterText = this.value.toLowerCase();
            const filteredUsers = users.filter(user => 
                user.username.toLowerCase().includes(filterText)
            );
            renderLikes(filteredUsers);
        });
    });
</script>